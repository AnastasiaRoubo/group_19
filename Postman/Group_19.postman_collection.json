{
	"info": {
		"_postman_id": "68eae155-b85b-4f4a-8c3c-10e1064cc5ff",
		"name": "Group_19",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Nastya",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							" });\r",
							" \r",
							" const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"            \"person\": {\r",
							"                \"type\":\"object\",\r",
							"                \"properties\": {\r",
							"                \"u_age\": { \"type\": \"integer\"},\r",
							"                \"u_name\": { \"type\":\"array\", \"items\": [{\"type\":\"string\"}, {\"type\":\"integer\"}, {\"type\":\"integer\"}]},\r",
							"                \"u_salary_1_5_year\":{ \"type\": \"integer\"},\r",
							"                },\r",
							"                \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"],\r",
							"        },\r",
							"     \r",
							"           \"qa_salary_after_12_months\": { \"type\": \"number\"},\r",
							"           \"qa_salary_after_6_months\":{ \"type\": \"integer\"},\r",
							"           \"start_qa_salary\": { \"type\": \"integer\"},\r",
							"    },\r",
							"    \"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\",  \"start_qa_salary\"]\r",
							"      \r",
							"};\r",
							"\r",
							"pm.test(\"Validate schema\",  () =>  {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"let salary_a = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Check salary\", function () {\r",
							"    let salary_c = pm.response.json();\r",
							"    pm.expect(salary_c.qa_salary_after_6_months).to.eql(salary_a.start_qa_salary*2);\r",
							"    pm.expect(salary_c.qa_salary_after_12_months).to.eql(salary_a.start_qa_salary*2.9);\r",
							"    pm.expect(salary_c.person.u_salary_1_5_year).to.eql(salary_a.start_qa_salary*4);\r",
							"       \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"let salary_b = JSON.parse(responseBody);\r",
							"pm.environment.set(\"salary\", salary_b.person.u_salary_1_5_year);\r",
							"\r",
							"\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 24,   \r\n    \"name\": \"Nastya\",\r\n    \"salary\": 2000,\r\n    \"auth_token\": \"/s34lfgbj/Nastya/jjd909/26972kjkWpqc1220123318615evny\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 200\", function (){\r",
							"    pm.response.to.have.status (200);\r",
							"});\r",
							"\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"name\", \"age\", \"salary\"],\r",
							"    \"properties\": {\r",
							"            \"name\": {\"type\":\"string\"},\r",
							"            \"age\": {\"type\":\"integer\"},\r",
							"            \"salary\": { \r",
							"                \"type\": \"array\",\r",
							"                \"items\": [{\"type\":\"integer\"}, {\"type\":\"string\"}, {\"type\":\"string\"}], \r",
							"            },\r",
							"                \r",
							"        },\r",
							"     \r",
							"    };\r",
							"    \r",
							"    pm.test(\"Schema is valid\", function () {\r",
							"        pm.response.to.have.jsonSchema(schema) });\r",
							"\r",
							"\r",
							"\r",
							" let salary_a = JSON.parse(responseBody);\r",
							"\r",
							" pm.test(\"Check salary_coef\", function () {\r",
							"     let salary_d = pm.response.json ();\r",
							"     pm.expect(parseInt(salary_d.salary[1])).to.eql(salary_a.salary[0]*2);\r",
							"     pm.expect(parseInt(salary_d.salary[2])).to.eql(salary_a.salary[0]*3);\r",
							" });\r",
							" \r",
							"  let salary_e = JSON.parse(responseBody);\r",
							" pm.test(\"Compare array coef\", function () {\r",
							"     let a =pm.response.json();\r",
							"\r",
							"pm.expect(parseInt(a.salary[2])).to.be.greaterThan(a.salary[0], (parseInt(a.salary[1])));\r",
							" });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nastya",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							" });\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"age\", \"daily_food\", \"daily_sleep\", \"name\"],\r",
							"    \"properties\": {\r",
							"            \"age\": {\"type\":\"integer\"},       \r",
							"            \"daily-food\": {\"type\":\"number\"},\r",
							"            \"daily_sleep\": {\"type\":\"number\"},\r",
							"            \"name\": {\"type\":\"string\"},\r",
							"         },\r",
							"     };\r",
							"       \r",
							"    \r",
							"    pm.test(\"Schema is valid\", function () {\r",
							"        pm.response.to.have.jsonSchema(schema)\r",
							"    });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    let weight_a = JSON.parse(responseBody);\r",
							"\r",
							"    pm.test(\"Weight_coef\", function () {\r",
							"      let weight = request.data.weight\r",
							"      let weight_b = pm.response.json ()\r",
							"      pm.expect(weight_b.daily_food).to.eql(weight*0.012);\r",
							"      let weight_c = pm.response.json ()\r",
							"      pm.expect(weight_c.daily_sleep).to.eql(weight*2.5);\r",
							"    });\r",
							"// console.log(weight_b.daily_food);\r",
							"   \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "3",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "6",
							"type": "text"
						},
						{
							"key": "name",
							"value": "bobik",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"     \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\"type\": \"string\"},\r",
							"    \"family\": {\"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [ {\"type\": \"string\"}, {\"type\": \"integer\" }]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"      },\r",
							"      \"required\": [ \"children\", \"u_salary_1_5_year\"]\r",
							"    },\r",
							"    \"name\": {\"type\": \"string\" },\r",
							"    \"salary\": {\"type\": \"integer\"}\r",
							"  },\r",
							"  \"required\": [\"age\", \"family\", \"name\", \"salary\"]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate schema\",  () =>  {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"let name_b = JSON.parse(responseBody);\r",
							"pm.environment.set(\"name\", name_b.name);\r",
							"\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Age is 30\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(parseInt(responseJson.age)).to.eql(30);\r",
							"    });\r",
							"\r",
							"\r",
							" \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Peter",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let object = JSON.parse(responseBody);\r",
							"let i=object.length;\r",
							"function getRandomID (max) {\r",
							"    return max[Math.floor(Math.random() * max.length)]; \r",
							"};\r",
							"// console.log( getRandomID(object))\r",
							"\r",
							"pm.environment.set('Cur_ID',getRandomID(object).Cur_ID)\r",
							"\r",
							"\r",
							"\r",
							"// const options = {\r",
							"//     url : 'http://168.119.182.98:5002/curr_byn',\r",
							"//     method:'POST',\r",
							"//     header: {\r",
							"//         'Content-Type':'application/json',\r",
							"//         'X-Foo': 'bar'\r",
							"//     },\r",
							"//     body: {\r",
							"//         mode: 'form-data',\r",
							"//         formdata:\r",
							"//         [\r",
							"//             {key:'curr_code', value: '23' } ,\r",
							"//             {key:'auth_token', value:'/s34lfgbj/Nastya/jjd909/58137kjkWpqc3413123129949evny' }\r",
							"//         ]\r",
							"//     }\r",
							"// }\r",
							"\r",
							"\r",
							"let  curr_list = [];\r",
							"for (let n = 0; n < i; n++){        \r",
							"    curr_list.push(object[n].Cur_ID);\r",
							"};\r",
							"console.log(curr_list);\r",
							"\r",
							"for ( let a = 0 ; a < curr_list.length ; a++){\r",
							"    // pm.request(curr_list[a])\r",
							"    pm.sendRequest(\"http://168.119.182.98:5002/curr_byn\", function (err, response) {\r",
							"      \r",
							"console.log(curr_list[a])\r",
							"};\r",
							"\r",
							"//     pm.request(curr_list[a])\r",
							"//     if (response == 200){     \r",
							"//     }\r",
							"\r",
							"// }\r",
							"\r",
							"\r",
							"// console.log(curr_list);\r",
							"\r",
							"// const postRequest = {\r",
							"//     url : 'http://168.119.182.98:5002/curr_byn',\r",
							"//     method:'POST',\r",
							"//     header: {\r",
							"//         'Content-Type':'application/json',\r",
							"//         'X-Foo': 'bar'\r",
							"//     },\r",
							"//     body: {\r",
							"//         mode: 'form-data',\r",
							"//         formdata:\r",
							"//         [\r",
							"//             {key:'curr_code', value: '23' } ,\r",
							"//             {key:'auth_token', value:'/s34lfgbj/Nastya/jjd909/58137kjkWpqc3413123129949evny' }\r",
							"//         ]\r",
							"//     }\r",
							"// }\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\" : {\r",
							"        \"Cur_Abbreviation\": {\"type\":\"string\"},\r",
							"        \"Cur_ID\": {\"type\":\"integer\"},\r",
							"        \"Cur_Name\": {\"type\":\"string\"},\r",
							"        \"Cur_OfficialRate\": {\"type\":\"number\"},\r",
							"        \"Cur_Scale\": {\"type\":\"integer\"},\r",
							"        \"Date\": {\"type\":\"string\"},\r",
							"    },\r",
							"    \"required\": [\"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\", \"Date\"],\r",
							"};\r",
							"\r",
							"   pm.test (\"Schema is valid\", ()=>\r",
							"   pm.response.to.have.jsonSchema(schema)\r",
							"   );\r",
							"   \r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.sendRequest(\"http://168.119.182.98:5002/currency\", function (err, response) {\r",
							"//     console.log(response.json());\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}